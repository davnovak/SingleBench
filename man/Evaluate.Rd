% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_Evaluate_.R
\name{Evaluate}
\alias{Evaluate}
\title{Evaluate (run) a benchmark}
\usage{
Evaluate(
  benchmark,
  score_projections,
  n_cores,
  which_python,
  seed.projection,
  seed.clustering,
  ask_overwrite,
  verbose
)
}
\arguments{
\item{benchmark}{object of class \code{Benchmark}, as generated by the constructor \code{Benchmark}}

\item{score_projections}{logical: whether results of projection steps should be scored. Default value is \code{FALSE}}

\item{n_cores}{optional integer: number of CPU threads to use for parallelisation of repeated runs of clustering for stability analysis. Default value is \code{NULL} (no parallelisation)}

\item{which_python}{optional string: path to Python if Python needs to be used via \code{reticulate}. Default value is \code{NULL} (\code{reticulate} uses its default Python configuration)}

\item{seed.projection}{optional numeric value: value random seed to be used prior to each deployment of a projection method. (Use \code{NULL} to avoid setting a seed.) Default value is \code{1}}

\item{seed.clustering}{optional numeric value: value random seed to be used prior to each deployment of a clustering method. (Use \code{NULL} to avoid setting a seed.) Default value is \code{1}}

\item{ask_overwrite}{logical: if \code{benchmark} was evaluated before, should the user be asked prior to overwriting the previous evaluation results? Default value is \code{TRUE}}

\item{verbose}{logical: should progress messages be printed during evaluation? Default value is \code{TRUE}}

\item{projection_collapse_n}{integer: upper bound of dataset size for which full distance matrices should be computed in evaluation (if \code{score_projections} is set to \code{TRUE}). Default value is \code{500}}

\item{projection_neighbourhood}{integer: number of nearest neighbours to use in K-ary neighbourhood-based evaluation of projection quality (if \code{score_projections} is set to \code{TRUE} and size of input dataset is less than \code{projection_collapse_n}). Default value is \code{100}}
}
\description{
This function evaluates a benchmark pipeline, specified by an object of type \code{Benchmark}.
This means that all the projection, clustering or projection->clustering subpipelines that were set up when creating the benchmark object are executed, and their performance is assessed using various evaluation metrics.
Both the benchmark object and its auxiliary HDF5 file are needed for this.
}
\section{Optional scoring of projection steps}{
Optionally, results of projection steps (if included) can be scored using evaluation metrics designed to measure the quality of dimension reduction (preservation of information versus original high-dimensional data).
To turn on scoring of projection steps, set parameter \code{score_projection} to \code{TRUE}.
Based on a numeric bound (parameter \code{projection_collapse_n}), metrics based exclusively on \emph{k}-nearest-neighbour graphs of original data and each projection will be computed if the row count of input data exceeds that value.
If the row count is lower than or equal to the limit, full distance matrices (quadratic complexity) will be computed.
In the first case, the local continuity meta-criterion (LCMC) as well as B_{NX} ('local intrusiveness versus extrusiveness') can be computed.
In the second case, trustworthiness and continuity are also computed.
By default, \code{projection_collapse_n} is set to \code{500}, preventing the computation of dull distance matrices except for very small datasets.
Additionally, the parameter \code{projection_neighbourhood} specifies the number of nearest neighbours used for partitioning the full co-ranking matrix (if the size of data is less than or equal to \code{projection_collapse_n}).
}

\section{Parallelisation}{
For stability analysis of clustering tools, repeated runs of the tool can be run in parallel (unless this is forbidden in the tool wrapper).
To do this, specify the parameter \code{n_cores}.
To use all available CPU cores, you can use \code{parallel::detectCores()} as the value of \code{n_cores}.
}

\seealso{
\itemize{
\item \strong{\code{AddLayout}}: allows you to add a separate 2-dimensional layout of the input dataset or to use an existing projection (produced in the evaluation) as a visualisation layout.
}
}
